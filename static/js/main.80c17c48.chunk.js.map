{"version":3,"sources":["Components/Header.jsx","Components/Crystal.jsx","Components/Score.jsx","Components/Modal.jsx","Components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["header","className","CrystalImage","props","state","randInt","Math","floor","random","resetInt","update","id","this","onClick","getRandNum","alt","datatype","randIntImg","src","Component","score","title","Modal","restart","document","querySelector","classList","remove","result","wins","losses","closeModal","Main","e","console","log","target","imgNumber","parseInt","getAttribute","setState","number","gameLogic","start","pictures","randIntImgOne","randomizeInt","randIntImgTwo","randIntImgThree","randIntImgFour","handleClick","bind","idRoot","getElementById","body","style","background","backgroundSize","a","b","reset","openModal","add","changeBG","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80c17c48.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function header(){\r\n    return <h1 className='header'> Crystal Collector </h1>;\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class CrystalImage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randInt: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            resetInt: this.props.update\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <img className='images' id={this.props.id} onClick={this.props.getRandNum}  alt='Crystals' datatype={this.props.randIntImg} src={this.props.src}></img>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function score(props){\r\n    return(\r\n        <h3>{props.title} : {props.score}</h3>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Score from './Score'\r\n\r\nexport default class Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            restart: false,\r\n        };\r\n        // this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    closeModal() {\r\n        let modalOuter= document.querySelector('.modal-outer');       \r\n        modalOuter.classList.remove('open');\r\n      }\r\n    render() {\r\n        return (<div className=\"modal-outer\">\r\n            <div className=\"modal-inner\">\r\n    <h2>You {this.props.result}</h2>\r\n                <Score title='Wins' score={this.props.wins}></Score>\r\n                <Score title='Losses' score={this.props.losses}></Score>\r\n                <button className='modalButton' onClick={this.closeModal}>Go again!</button>\r\n                <button className='modalButton' onClick={() => { this.props.restart(); this.closeModal();}} >Reset Score</button>\r\n            </div>\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CrystalImage from './Crystal';\r\nimport Score from \"./Score\";\r\nimport Modal from './Modal';\r\n\r\n\r\n\r\nexport default class Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: false,\r\n            number: 0,\r\n            pictures: ['./images/crystal-1.png', './images/crystal-2.png', './images/crystal-3.png', './images/crystal-4.png'],\r\n            randInt: Math.floor(Math.random() * (60 - 10)) + 10,\r\n            wins: 0,\r\n            losses: 0,\r\n            randIntImgOne: this.randomizeInt(1, 10),\r\n            randIntImgTwo: this.randomizeInt(1, 10),\r\n            randIntImgThree: this.randomizeInt(1, 10),\r\n            randIntImgFour: this.randomizeInt(1, 10),\r\n            result: 'Won',\r\n        };\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.restart = this.restart.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.setState({\r\n            randIntImgOne: this.randomizeInt(1, 10),\r\n            randIntImgTwo: this.randomizeInt(1, 10),\r\n            randIntImgThree: this.randomizeInt(1, 10),\r\n            randIntImgFour: this.randomizeInt(1, 10),\r\n        })\r\n    }\r\n\r\n    changeBG() { \r\n        let idRoot = document.getElementById('root');\r\n        document.body.style.background = \"url('./images/background-game2.jpg')\";\r\n        document.body.style.backgroundSize = \"cover\";\r\n        idRoot.style.background = \"rgba(255, 0, 0, 0.5)\"\r\n    }\r\n    randomizeInt(a, b) {\r\n        return (Math.floor(Math.random() * (a - b)) + 10)\r\n    }\r\n\r\n    getRandNum = (e) => {\r\n        console.log(e.target)\r\n        let imgNumber = parseInt(e.target.getAttribute('datatype'));\r\n        this.setState({\r\n            number: (this.state.number + imgNumber)\r\n        }, this.gameLogic);\r\n    }\r\n\r\n    gameLogic() {\r\n        if (this.state.number === this.state.randInt) {\r\n            this.setState(() => ({\r\n                wins: this.state.wins + 1,\r\n                result: 'won!!',\r\n            }), this.reset);\r\n            console.log('ganaste!')\r\n            this.openModal()\r\n        }\r\n        else if (this.state.number > this.state.randInt) {\r\n            this.setState(() => ({ result: 'lost!',losses: this.state.losses + 1 }), this.reset);\r\n            console.log('perdistess')\r\n            this.openModal()\r\n        }\r\n    }\r\n    \r\n    openModal(){\r\n        let modalOuter= document.querySelector('.modal-outer');       \r\n         modalOuter.classList.add('open');\r\n    }\r\n\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            start: true\r\n        })\r\n        this.changeBG();\r\n    }\r\n    reset() {\r\n        this.setState({\r\n            number: 0,\r\n            randInt: Math.floor(Math.random() * (60 - 10)) + 10,\r\n            randIntImgOne: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgTwo: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgThree: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgFour: Math.floor(Math.random() * (1 - 10)) + 10,\r\n        })\r\n    }\r\n    restart() {\r\n        this.setState({\r\n            number: 0,\r\n            wins: 0,\r\n            losses: 0,\r\n            randInt: Math.floor(Math.random() * (60 - 10)) + 10,\r\n            randIntImgOne: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgTwo: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgThree: Math.floor(Math.random() * (1 - 10)) + 10,\r\n            randIntImgFour: Math.floor(Math.random() * (1 - 10)) + 10,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.state.start) {\r\n            return (<div className='start'>\r\n                                <h4 id='instructions-header'>&#9753;Instructions&#10087;</h4>\r\n                <p className='instructions'>     \r\n                &#9753;You will be given a random number at the start of the game.<br />\r\n\r\n                &#9753;There are four crystals below by clicking on a crystal you will add a specific amount of points to your total score.<br/>\r\n\r\n                &#9753;You win the game by matching your total score to random number<br/>\r\n                \r\n                &#9753;You lose the game if your total score goes above the random number.<br/>\r\n\r\n                &#9753;The value of each crystal is hidden from you until you click on it.<br/>\r\n\r\n                &#9753;Each time when the game starts. the game will change the values of each crystal.<br/>\r\n\r\n                &#9753;Memorize before you cannot see the numbers again!&#10087;\r\n        </p>\r\n                <button className='myButton' onClick={this.handleClick}>Start!</button></div>)\r\n        }\r\n        else {\r\n            return (\r\n                < div className='game-lobby' >\r\n                    <div className=\"NumDiv\">\r\n                        <Score title='Number to Match' score={this.state.randInt} ></Score>\r\n                        <Score title='Your Number' score={this.state.number} ></Score>\r\n                    </div>\r\n                    <div className='ScoresDiv'>\r\n                        <Score title='Wins' score={this.state.wins}></Score>\r\n                        <Score title='Losses' score={this.state.losses}></Score>\r\n                    </div>\r\n                    <div className='imagesDiv1'>\r\n                        <CrystalImage id={'image1'} getRandNum={this.getRandNum} src={this.state.pictures[0]} randIntImg={this.state.randIntImgOne} ></CrystalImage>\r\n                    </div>\r\n                    <div className='imagesDiv2'>\r\n                        <CrystalImage id={'image2'} getRandNum={this.getRandNum} src={this.state.pictures[2]} randIntImg={this.state.randIntImgThree} ></CrystalImage>\r\n                    </div>\r\n                    <div className='imagesDiv3'>\r\n                        <CrystalImage id={'image3'} getRandNum={this.getRandNum} src={this.state.pictures[1]} randIntImg={this.state.randIntImgTwo}></CrystalImage>\r\n                    </div>\r\n                    <div className='imagesDiv4'>\r\n                        <CrystalImage id={'image4'} getRandNum={this.getRandNum} src={this.state.pictures[3]} randIntImg={this.state.randIntImgFour}></CrystalImage>\r\n                    </div>\r\n                    <Modal wins={this.state.wins} losses={this.state.losses} result={this.state.result} restart={this.restart}></Modal>\r\n                </div >\r\n            )\r\n        }\r\n\r\n    }\r\n};\r\n\r\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Main from \"./Components/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}